<div class="notebook">

<div class="nb-cell markdown" name="md1">
### Programming Paradigms Fall 2022 — Problem Set 12
#### Name Surname: Vagif Khalilov
#### Group: BS20-SD-01
#### Email: v.khalilov@innopolis.university
</div>

<div class="nb-cell markdown" name="md2">
#### Task 1 
Implement the following variations of a predicate that can find a minimum/maximum:
</div>

<div class="nb-cell markdown" name="md6">
(**a**) Write down predicate ` minimum/2` that finds the minimum number in a list of numbers
</div>

<div class="nb-cell program" data-background="true" name="p2">
minimum([X], X).
minimum([X | T], X) :- 
	minimum(T, M),
	X =&lt; M, !.
minimum([_| T], M) :-
	minimum(T, M).
</div>

<div class="nb-cell query" name="q1">
minimum([3, 6, 2, 5, 4, 7], X)
</div>

<div class="nb-cell markdown" name="md7">
(**b**) Write down predicate ` leastSpecific` that finds the term that is least specified (i.e. it can
be unified individually with all terms in the list):
</div>

<div class="nb-cell program" data-background="true" name="p3">

</div>

<div class="nb-cell query" name="q2">
leastSpecific(T, [t(a, b), t(X, b), t(a, X), t(X, X), t(X, Y)])
</div>

<div class="nb-cell markdown" name="md3">
#### Task 2 
Implement the following variations of a predicate that can remove elements from a list:
</div>

<div class="nb-cell markdown" name="md8">
(**a**) Without using negation or ` fail`, implement predicate ` remove/3` that removes all occurrences
of a given element from a list:
</div>

<div class="nb-cell program" data-background="true" name="p4">
remove(_, [], []).
remove(X, [X|T], L):- remove(X, T, L), !.
remove(E, [X|T1], [X|T2]):- remove(E, T1, T2).
</div>

<div class="nb-cell query" name="q3">
remove(e, [a,p,p,l,e, p,i,e], X)
</div>

<div class="nb-cell markdown" name="md9">
(**b**) Implement predicate ` removeU/3` that removes all elements from a list that can be unified
with a given term:
</div>

<div class="nb-cell program" data-background="true" name="p5">
removeU(_, [], []).
removeU(E, [X|T], L):- not(not(E=X)), removeU(E, T, L), !.
removeU(E, [X|T1], [X|T2]):- not(E=X), removeU(E, T1, T2).
</div>

<div class="nb-cell query" name="q4">
removeU(t(X), [1, a, A, tb, t(b), tX, t(B)], Y)
</div>

<div class="nb-cell markdown" name="md5">
#### Task 3 
Consider predicates ` nat/1` and ` nat/2` defined as follows:
</div>

<div class="nb-cell program" data-background="true" name="p1">
nat(0).
nat(N) :- nat(K), N is K+1.
nat(0, 0) :- !.
nat(0, Max) :- Max &gt; 0.
nat(N, Max) :- M is Max-1, nat(K, M), N is K+1.
</div>

<div class="nb-cell markdown" name="md4">
(**a**) Implement predicate ` prime/1` that checks if a given number is a prime number. The implementation should encode the following definition: “a number N is prime if there **does not exist** a pair of numbers 1 &lt; X, Y &lt; N such that X × Y = N.”
</div>

<div class="nb-cell program" data-background="true" name="p6">

</div>

<div class="nb-cell query" name="q5">
prime(29)
</div>

<div class="nb-cell query" name="q7">
prime(N)
</div>

<div class="nb-cell markdown" name="md10">
(**b**) Implement predicate ` coprime/2` that checks if two numbers are coprime. The implementation should encode the following definition: “two numbers N and M are coprime if there **does not exist** a pair of numbers 1 ≤ K ≤ M and 1 ≤ L &lt; N such that N ×K = M ×L.”
</div>

<div class="nb-cell program" data-background="true" name="p7">

</div>

<div class="nb-cell query" name="q6">
coprime(6, 35)
</div>

<div class="nb-cell query" name="q8">
coprime(N, M)
</div>

</div>
